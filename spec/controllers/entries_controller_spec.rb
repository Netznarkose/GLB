require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EntriesController do
  def valid_attributes
    { "namenskuerzel" => "JZ" }
  end
  before :each do
    @user = FactoryGirl.create(:editor)
    @admin = FactoryGirl.create(:admin)
    @entry = FactoryGirl.create(:entry)
  end

  describe "GET index" do
    it "assigns all entries as @entries" do
      sign_in @admin
      get :index
      assigns(:entries).should eq([@entry])
      sign_out @admin
    end
  end

  describe "GET show" do
    it "assigns the requested entry as @entry" do
      sign_in @admin
      get :show, {:id => @entry.to_param}
      assigns(:entry).should eq(@entry)
      sign_out @admin
    end
  end

  describe "GET new" do
    it "assigns a new entry as @entry" do
      sign_in @admin
      get :new
      assigns(:entry).should be_a_new(Entry)
      sign_out @admin
    end
  end

  describe "GET edit" do
    it "assigns the requested entry as @entry" do
      sign_in @user
      @entry.user = @user
      @entry.reload
      get :edit, {:id => @entry.to_param}
      assigns(:entry).should eq(@entry)
      sign_out @user
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Entry" do
        sign_in @admin
        expect {
          post :create, {:entry => valid_attributes}
        }.to change(Entry, :count).by(1)
        sign_out @admin
      end

      it "assigns a newly created entry as @entry" do
        sign_in @admin
        post :create, {:entry => valid_attributes}
        assigns(:entry).should be_a(Entry)
        assigns(:entry).should be_persisted
        sign_out @admin
      end

      it "redirects to the created entry" do
        sign_in @admin
        post :create, {:entry => valid_attributes}
        response.should redirect_to(Entry.last)
        sign_out @admin
      end
    end

    describe "with invalid params" do
      pending
      it "assigns a newly created but unsaved entry as @entry" do
        # Trigger the behavior that occurs when invalid params are submitted
        Entry.any_instance.stub(:save).and_return(false)
        post :create, {:entry => { "namenskuerzel" => "invalid value" }}
        assigns(:entry).should be_a_new(Entry)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Entry.any_instance.stub(:save).and_return(false)
        post :create, {:entry => { "verfasser" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      pending
      it "updates the requested entry" do
        entry = Entry.create! valid_attributes
        # Assuming there are no other entries in the database, this
        # specifies that the Entry created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Entry.any_instance.should_receive(:update_attributes).with({ "verfasser" => "MyString" })
        put :update, {:id => entry.to_param, :entry => { "verfasser" => "MyString" }}
      end

      it "assigns the requested entry as @entry" do
        entry = Entry.create! valid_attributes
        put :update, {:id => entry.to_param, :entry => valid_attributes}
        assigns(:entry).should eq(entry)
      end

      it "redirects to the entry" do
        entry = Entry.create! valid_attributes
        put :update, {:id => entry.to_param, :entry => valid_attributes}
        response.should redirect_to(entry)
      end
    end

    describe "with invalid params" do
      it "assigns the entry as @entry" do
        sign_in @admin
        # Trigger the behavior that occurs when invalid params are submitted
        Entry.any_instance.stub(:save).and_return(false)
        put :update, {:id => @entry.to_param, :entry => { "namenskuerzel" => "invalid value" }}
        assigns(:entry).should eq(@entry)
        sign_out @admin
      end

      it "re-renders the 'edit' template" do
        sign_in @admin
        # Trigger the behavior that occurs when invalid params are submitted
        Entry.any_instance.stub(:save).and_return(false)
        put :update, {:id => @entry.to_param, :entry => { "namenskuerzel" => "invalid value" }}
        response.should render_template("edit")
        sign_out @admin
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested entry" do
      sign_in @admin
      expect {
        delete :destroy, {:id => @entry.to_param}
      }.to change(Entry, :count).by(-1)
      sign_out @admin
    end

    it "redirects to the entries list" do
      sign_in @admin
      delete :destroy, {:id => @entry.to_param}
      response.should redirect_to(entries_url)
      sign_out @admin
    end
  end

end
